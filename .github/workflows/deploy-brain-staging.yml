name: Deploy Brain Changes (Staging)

on:
  push:
    branches:
      - main
    paths:
      - 'Brain/**' # Trigger only on changes within the Brain directory
      - '.github/workflows/deploy-brain-staging.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'Brain/**' # Trigger only on changes within the Brain directory
      - '.github/workflows/deploy-brain-staging.yml'

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials with Access Keys
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1 # Or your desired AWS region

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Find Lambda Function Name
        id: find_lambda
        run: |
          # Find the Lambda function containing 'curiosity-coach-brain-staging'
          # Use the AWS_REGION secret or hardcode if preferred
          FUNCTION_NAME=$(aws lambda list-functions --region ap-south-1 --query 'Functions[?contains(FunctionName, `curiosity-coach-brain-staging`)].FunctionName | [0]' --output text | head -n 1)
          if [ -z "$FUNCTION_NAME" ] || [ "$FUNCTION_NAME" == "None" ]; then
            echo "Error: Could not find Lambda function containing 'curiosity-coach-brain-staging' in region ap-south-1."
            exit 1
          fi
          echo "Found Lambda function: $FUNCTION_NAME"
          echo "::set-output name=function_name::$FUNCTION_NAME"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # ECR repository name for staging environment
          ECR_REPOSITORY: curiosity-coach-brain-staging-ecr
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./Brain # Set working directory to Brain
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update Lambda function code
        env:
          # Use the dynamically found function name from the previous step
          LAMBDA_FUNCTION_NAME: ${{ steps.find_lambda.outputs.function_name }}
        run: |
          aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --image-uri ${{ steps.build-image.outputs.image }}

      - name: Wait for Lambda function update to complete
        env:
          LAMBDA_FUNCTION_NAME: ${{ steps.find_lambda.outputs.function_name }}
        run: |
          echo "Waiting for function update to complete for $LAMBDA_FUNCTION_NAME..."
          aws lambda wait function-updated --function-name $LAMBDA_FUNCTION_NAME --region ap-south-1
          echo "Function update completed."

      - name: Find Backend Lambda Function Name
        id: find_backend_lambda
        run: |
          # Find the Lambda function containing 'curiosity-coach-backend-staging'
          FUNCTION_NAME=$(aws lambda list-functions --region ap-south-1 --query 'Functions[?contains(FunctionName, `curiosity-coach-backend-staging`)].FunctionName | [0]' --output text | head -n 1)
          if [ -z "$FUNCTION_NAME" ] || [ "$FUNCTION_NAME" == "None" ]; then
            echo "Error: Could not find Lambda function containing 'curiosity-coach-backend-staging' in region ap-south-1."
            exit 1
          fi
          echo "Found Backend Lambda function: $FUNCTION_NAME"
          echo "::set-output name=function_name::$FUNCTION_NAME"

      - name: Get Backend Lambda Function URL
        id: get_backend_url
        run: |
          BACKEND_FUNCTION_NAME=${{ steps.find_backend_lambda.outputs.function_name }}
          FUNCTION_URL_CONFIG=$(aws lambda get-function-url-config --function-name $BACKEND_FUNCTION_NAME --region ap-south-1 --output json)
          # Use jq to parse the JSON and extract the FunctionUrl
          FUNCTION_URL=$(echo $FUNCTION_URL_CONFIG | jq -r '.FunctionUrl')

          # Remove trailing slash if it exists
          FUNCTION_URL=${FUNCTION_URL%/}

          if [ -z "$FUNCTION_URL" ] || [ "$FUNCTION_URL" == "null" ]; then
             echo "Error: Could not retrieve Function URL for $BACKEND_FUNCTION_NAME. Ensure it has a Function URL configured and the IAM role has permissions for lambda:GetFunctionUrlConfig."
             exit 1
          fi
          echo "Found Backend Function URL: $FUNCTION_URL"
          echo "::set-output name=url::$FUNCTION_URL"

      - name: Update Brain Lambda Environment Variables
        env:
          BRAIN_LAMBDA_FUNCTION_NAME: ${{ steps.find_lambda.outputs.function_name }}
          BACKEND_URL: ${{ steps.get_backend_url.outputs.url }}
        run: |
          echo "Updating environment variables for $BRAIN_LAMBDA_FUNCTION_NAME with Backend URL: $BACKEND_URL"
          # Get current environment variables JSON
          CURRENT_ENV_VARS=$(aws lambda get-function-configuration --function-name $BRAIN_LAMBDA_FUNCTION_NAME --region ap-south-1 --query 'Environment.Variables' --output json)

          # Check if jq is installed, if not, install it (Ubuntu runners usually have it)
          if ! command -v jq &> /dev/null
          then
              echo "jq could not be found, attempting to install..."
              sudo apt-get update && sudo apt-get install -y jq
          fi

          # Use jq to merge the current variables with the new BACKEND_CALLBACK_BASE_URL
          # This handles cases where Environment.Variables might not exist initially (null)
          if [ "$CURRENT_ENV_VARS" == "null" ]; then
            UPDATED_ENV_VARS=$(jq -n --arg url "$BACKEND_URL" '{"BACKEND_CALLBACK_BASE_URL": $url}')
          else
            UPDATED_ENV_VARS=$(echo $CURRENT_ENV_VARS | jq --arg url "$BACKEND_URL" '. + {BACKEND_CALLBACK_BASE_URL: $url}')
          fi

          echo "New environment variables JSON: $UPDATED_ENV_VARS"

          # Construct the JSON payload for the --environment argument
          # Ensure the UPDATED_ENV_VARS JSON is correctly embedded within the {"Variables": ...} structure
          ENV_PAYLOAD=$(jq -n --argjson vars "$UPDATED_ENV_VARS" '{"Variables": $vars}')
          echo "Environment payload for AWS CLI: $ENV_PAYLOAD"

          # Update the function configuration with the merged environment variables
          aws lambda update-function-configuration --function-name $BRAIN_LAMBDA_FUNCTION_NAME --region ap-south-1 --environment "$ENV_PAYLOAD"

          echo "Lambda environment variables updated successfully." 