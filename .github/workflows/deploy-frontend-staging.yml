name: Deploy Frontend to AWS S3 and CloudFront (Staging)

on:
  push:
    branches:
      - main
    paths:
      - 'curiosity-coach-frontend/**' # Trigger only on changes within the frontend directory
      - '.github/workflows/deploy-frontend-staging.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'curiosity-coach-frontend/**' # Trigger only on changes within the frontend directory
      - '.github/workflows/deploy-frontend-staging.yml'
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: read # Required to check out the code

jobs:
  deploy:
    name: Build and Deploy Frontend (Staging)
    runs-on: ubuntu-latest
    # Optional: Specify the environment if you use GitHub Environments
    # environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify your Node.js version
          # Cache is now directory-specific
          # cache: 'npm' 

      - name: Configure AWS Credentials with Access Keys
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Install Dependencies
        working-directory: ./curiosity-coach-frontend
        run: |
          npm ci # Faster and more reliable than 'npm install' for CI

      - name: Get Lambda Function URL
        id: get_lambda_url
        run: |
          # Find the Lambda function containing the specified string for staging
          # Pipe to head -n 1 to ensure only the first line (the actual name) is captured
          FUNCTION_NAME=$(aws lambda list-functions --region ap-south-1 --query 'Functions[?contains(FunctionName, `curiosity-coach-backend-staging`)].FunctionName | [0]' --output text | head -n 1)
          if [ -z "$FUNCTION_NAME" ] || [ "$FUNCTION_NAME" == "None" ]; then
            echo "Error: Could not find Lambda function containing 'curiosity-coach-backend-staging' in region ap-south-1."
            exit 1
          fi
          echo "Found Lambda function: $FUNCTION_NAME"

          # Get the full function URL configuration as JSON
          CONFIG_OUTPUT=$(aws lambda get-function-url-config --region ap-south-1 --function-name "$FUNCTION_NAME" --output json 2>&1)
          CONFIG_EXIT_CODE=$?

          # Check if the AWS CLI command failed
          if [ $CONFIG_EXIT_CODE -ne 0 ]; then
            echo "Error: Failed to execute aws lambda get-function-url-config. Exit code: $CONFIG_EXIT_CODE"
            echo "AWS CLI Output/Error:"
            echo "$CONFIG_OUTPUT"
            exit 1
          fi

          # Parse the FunctionUrl from the JSON output using jq
          # Use -e flag to set exit code 1 if .FunctionUrl is null or not found
          # Use -r flag to get raw string output without quotes
          FUNCTION_URL=$(echo "$CONFIG_OUTPUT" | jq -e -r '.FunctionUrl')
          JQ_EXIT_CODE=$?

          # Check if jq failed or the extracted URL is empty/null
          if [ $JQ_EXIT_CODE -ne 0 ] || [ -z "$FUNCTION_URL" ] || [ "$FUNCTION_URL" == "null" ]; then
            echo "Error: Could not parse FunctionUrl from AWS CLI output or Function URL is not configured."
            echo "jq Exit Code: $JQ_EXIT_CODE"
            echo "Parsed URL: '$FUNCTION_URL'"
            echo "Full AWS CLI Output:"
            echo "$CONFIG_OUTPUT"
            exit 1
          fi

          # Success path
          echo "Successfully retrieved Function URL: $FUNCTION_URL"
          # Remove trailing slash if it exists
          FUNCTION_URL=${FUNCTION_URL%/}
          echo "::set-output name=lambda_url::$FUNCTION_URL"
          echo "FUNCTION_URL=$FUNCTION_URL" >> $GITHUB_ENV

      - name: Get Brain Lambda Function URL
        id: get_brain_lambda_url
        run: |
          # Find the Lambda function containing the specified string for staging
          BRAIN_FUNCTION_NAME=$(aws lambda list-functions --region ap-south-1 --query 'Functions[?contains(FunctionName, `curiosity-coach-brain-staging`)].FunctionName | [0]' --output text | head -n 1)
          if [ -z "$BRAIN_FUNCTION_NAME" ] || [ "$BRAIN_FUNCTION_NAME" == "None" ]; then
            echo "Error: Could not find Lambda function containing 'curiosity-coach-brain-staging' in region ap-south-1."
            exit 1
          fi
          echo "Found Brain Lambda function: $BRAIN_FUNCTION_NAME"

          # Get the full function URL configuration as JSON
          CONFIG_OUTPUT=$(aws lambda get-function-url-config --region ap-south-1 --function-name "$BRAIN_FUNCTION_NAME" --output json 2>&1)
          CONFIG_EXIT_CODE=$?

          # Check if the AWS CLI command failed
          if [ $CONFIG_EXIT_CODE -ne 0 ]; then
            echo "Error: Failed to execute aws lambda get-function-url-config for brain. Exit code: $CONFIG_EXIT_CODE"
            echo "AWS CLI Output/Error:"
            echo "$CONFIG_OUTPUT"
            exit 1
          fi

          # Parse the FunctionUrl from the JSON output using jq
          # Use -e flag to set exit code 1 if .FunctionUrl is null or not found
          # Use -r flag to get raw string output without quotes
          BRAIN_FUNCTION_URL_RAW=$(echo "$CONFIG_OUTPUT" | jq -e -r '.FunctionUrl')
          JQ_EXIT_CODE=$?

          # Check if jq failed or the extracted URL is empty/null
          if [ $JQ_EXIT_CODE -ne 0 ] || [ -z "$BRAIN_FUNCTION_URL_RAW" ] || [ "$BRAIN_FUNCTION_URL_RAW" == "null" ]; then
            echo "Error: Could not parse FunctionUrl for brain from AWS CLI output or Function URL is not configured."
            echo "jq Exit Code: $JQ_EXIT_CODE"
            echo "Parsed URL: '$BRAIN_FUNCTION_URL_RAW'"
            echo "Full AWS CLI Output:"
            echo "$CONFIG_OUTPUT"
            exit 1
          fi

          # Success path
          echo "Successfully retrieved Brain Function URL: $BRAIN_FUNCTION_URL_RAW"
          # Remove trailing slash if it exists
          BRAIN_FUNCTION_URL=${BRAIN_FUNCTION_URL_RAW%/}
          echo "::set-output name=brain_lambda_url::$BRAIN_FUNCTION_URL"
          echo "BRAIN_FUNCTION_URL=$BRAIN_FUNCTION_URL" >> $GITHUB_ENV

      - name: Build Frontend Application
        working-directory: ./curiosity-coach-frontend
        run: npm run build
        env:
          # Use the dynamically fetched Lambda URL
          REACT_APP_BACKEND_BASE_URL: ${{ env.FUNCTION_URL }}
          REACT_APP_BRAIN_API_URL: ${{ env.BRAIN_FUNCTION_URL }}

      - name: Deploy to S3 Bucket
        run: |
          aws s3 sync ./curiosity-coach-frontend/build s3://${{ secrets.AWS_S3_BUCKET_NAME_STAGING }} --delete

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_STAGING }} \
            --paths "/*" # Invalidate everything 